Variable Bindings
=================
from: "The Rust Programming Language"
link: https://doc.rust-lang.org/stable/book/first-edition/variable-bindings.html
date: 16/11/17

Variable bindings bind some value to a name, so it can be used later. "let" is
used to introduce a binding, like this:

	let x = 5;


Patterns
--------
In most languages, a variable binding would be called a "variable", but Rust's
variable bindings have some caveats. For example the left-hand side of a "let"
statement is a pattern, not a variable name. This means we can do things like:

	let (x, y) = (1, 2);

After this statement is evaluated, "x" will be one, and "y" will be two. Pat-
terns are really powerfull.

Type Annotations
----------------
Rust is a statically typed language, which means that we specify our types up
front, and they're checked at compile time. But Rust has type inference, the
compiler can figure out what the type of something is, Rust doesn't require
you to explicitly type it out. But we can add the type if we want to. Types
come after a colon ":"

	let x: i32 = 5;

This would be read as: "x is a binding with the type i32 and the value 5".

Rust has many different primitive integer types. They begin with "i" for sig-
ned integers and "u" for unsigned integers. The possible integer sizes are 8,
16, 32, and 64 bits. Types can also be annotated using comments:

	let x = 5;	// x: i32

Including this kind of comments is not idiomatic Rust.

Mutability
----------
By default, bindings are immutable. For example, this code will not compile:

	let x = 5;
	    x = 10;

It will give you the error: error: re-assignment of immutable variable `x`

If you want a binding to be mutable, you can use "mut":

	let mut x = 5;	// mut x: i32
	        x = 10;

One of the reasons that bindings are immutable by default is safety. If you
forget to say "mut", the compiler will catch it, and let you know that you
have mutated something you may not have intended to mutate. If bindings were
mutable by default, the compiler would not be able to tell you this.

Initializing Bindings
---------------------
Rust variable bindings have one more aspect that differs form other languages:
bindings are required to be initialized with a value before you're allowed to
use them